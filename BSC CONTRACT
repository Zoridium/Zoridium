/**
 *Submitted for verification at BscScan.com on 2023-05-05
*/

// SPDX-License-Identifier: MIT
pragma solidity 0.8.18;

abstract contract Context 
{
    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}

contract Ownable is Context {
    address private _owner;
    address private _previousOwner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }   
    
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
    
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {

    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}

contract Zoridium is Context, IERC20, Ownable 
{
    using SafeMath for uint256;

    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply;
    string private _name;
    string private _symbol;
    uint8 private _decimals;
    uint256 public _maxTxAmount;
    uint256 public launchTimestamp;
    uint256[] public clifsAmount; 
    uint256[] public clifsTimespan; 
    event ClifReleased(uint256, address, uint256);
    
    address public blokCatenaStudiosWallet = 0x4eb611163c022BA6B2F4E263B6a0E2EA973864DA;
    address public liquidityWallet = 0x9ba4F654756C8798145cDF0901670c42e1D47055;
    address public partnershipWallet = 0xb15B90A845D4e3e512d1f9941be55c4337425E7D;

    constructor() 
    { 
        _name = "Zoridium";
        _symbol = "ZOI";
        _decimals = 9;

        _mint(blokCatenaStudiosWallet, 55_000_000 * 10**9);
        _mint(liquidityWallet, 20_000_000 * 10**9);
        _mint(partnershipWallet, 5_000_000 * 10**9);
        _mint(address(this), 20_000_000 * 10**9);

        _maxTxAmount = totalSupply().mul(1).div(100);

        launchTimestamp = block.timestamp;
        clifsAmount = [5000_000e9, 5000_000e9, 5000_000e9, 5000_000e9];
        clifsTimespan = [182 days, 365 days, 547 days, 730 days];
    }

    /*   
        Passing Value   -   Description 
            0           -   First Clif release after 6 months 
            1           -   Second Clif release after 1 year 
            2           -   Third Clif release after 1 year and 6 months
            3           -   Fourth Clif release after 2 years. 
    */
    
    function releaseClif(uint256 clif) external onlyOwner
    {
        uint256 timeLapse =  (block.timestamp-launchTimestamp);
        uint256 amount = clifsAmount[clif];
        uint256 span = clifsTimespan[clif];
        require(span<timeLapse, "Cannot Release so early");
        require(amount>0, "Already Released"); 
        _transferTokens(address(this), owner(), amount);
        clifsAmount[clif] = 0;
        emit ClifReleased(amount, owner(), block.timestamp);
    }

    function name() public view virtual returns (string memory) {
        return _name;
    }

    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transferTokens(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transferTokens(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    function _transferTokens(address from, address to, uint256 amount) internal virtual 
    {
         if(from != owner() && to != owner()) 
         {
            require(amount <= _maxTxAmount, "Exceeds Max Tx Amount");
         }
         
         _transfer(from, to, amount);
    }

    function _transfer(address sender, address recipient, uint256 amount) internal virtual 
    {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    function _mint(address __account, uint256 __amount) internal virtual {
        require(__account != address(0), "ERC20: mint to the zero address");
        _totalSupply = _totalSupply.add(__amount);
        _balances[__account] = _balances[__account].add(__amount);
        emit Transfer(address(0), __account, __amount);
    }

    function _burn(address __account, uint256 __amount) internal virtual {
        require(__account != address(0), "ERC20: burn from the zero address");
        _balances[__account] = _balances[__account].sub(__amount, "ERC20: burn __amount exceeds balance");
        _totalSupply = _totalSupply.sub(__amount);
        emit Transfer(__account, address(0), __amount);
    }

    function _approve(address __owner, address __spender, uint256 __amount) internal virtual {
        require(__owner != address(0), "ERC20: approve from the zero address");
        require(__spender != address(0), "ERC20: approve to the zero address");
        _allowances[__owner][__spender] = __amount;
        emit Approval(__owner, __spender, __amount);
    }
}
